@model StackFaceSystem.Web.ViewModels.Posts.DetailsPostWithPagableAnswersViewModel
<hr class="style" />
@Html.Partial("_ErrorOrSuccessPartial")

<div id="onEditPost" style="display: none"></div>
<div id="onEditPostLoading" style="display: none">
    <div class="circle"></div>
    <div class="circle1"></div>
</div>
<div id="originalPost">
    <h1 data-postid="@Model.Post.EncodedId" style="display:none"></h1>
    <h3>@Model.Post.Title</h3>
    <hr class="style" />

    <div class="well">
        <div class="row">
            <div class="col-md-2">
                <div class="forum-well text-center">
                    <div data-id="@Model.Post.Id" data-action="up" data-subject="post"><i class="glyphicon glyphicon-thumbs-up"></i></div>
                    <div class="row" data-id="@Model.Post.Id" data-subject="post" data-action="votesCount">@Model.Post.VotesSum</div>
                    <div data-id="@Model.Post.Id" data-action="down" data-subject="post"><i class="glyphicon glyphicon-thumbs-down"></i></div>
                </div>
            </div>

            <div class="col-md-10">
                <p>@Html.Raw(Model.Post.SanitizedContent)</p>
                <div class="row post-info note">
                    <hr class="post-info" />
                    <span class="pull-left">
                        before @Html.DisplayFor(x => x.Post.CreatedOn) category: <a href="/Categories/GetCategoryPosts/@Model.Post.Category">@Model.Post.Category</a> author: <a href="#">@Model.Post.Author</a>
                    </span>
                </div>

                <hr class="post-info" />

                <div>
                    <i class="glyphicon glyphicon-tags"></i>
                    @foreach (var tag in Model.Post.Tags)
                    {
                        <span class="label label-default">@tag</span>
                    }

                    @if (this.User.Identity.Name == Model.Post.Author || this.User.IsInRole("Administrator") || this.User.IsInRole("Moderator"))
                    {
                        <div class = "pull-right btn btn-danger btn-sm glyphicon glyphicon-remove" data-action="postDelete" data-id="@Model.Post.EncodedId" ></div>

                        @Ajax.ActionLink(" ", "EditPost", "Posts", new { postId = Model.Post.EncodedId },
                                                         new AjaxOptions
                                                         {
                                                             UpdateTargetId = "onEditPost",
                                                             LoadingElementId = "onEditPostLoading",
                                                             HttpMethod = "GET",
                                                             InsertionMode = InsertionMode.Replace,
                                                             OnBegin = "OnAjaxEditPostBegin",
                                                             OnSuccess = "OnAjaxEditPostSuccess"
                                                         }, new { @class = "pull-right btn btn-default btn-sm glyphicon glyphicon-pencil" })
                    }
                    @if (this.User.Identity.IsAuthenticated)
                    {
                        @Ajax.ActionLink("Answer", "CreateAnswer", "Answers", new { postId = Model.Post.Id },
                                                new AjaxOptions
                                                {
                                                    UpdateTargetId = "addAnswerToPost",
                                                    LoadingElementId = "addAnswerToPostLoading",
                                                    HttpMethod = "GET",
                                                    InsertionMode = InsertionMode.Replace,
                                                    OnSuccess = "OnAjaxAnswerSuccess"
                                                }, new { @class = "pull-right btn btn-default btn-sm" })
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div id="addAnswerToPost" style="display: none"></div>
<div id="addAnswerToPostLoading" style="display: none">
    <div class="circle"></div>
    <div class="circle1"></div>
</div>
<div class="container col-md-12">
    <h4>Answers</h4>
    <hr class="style" />
</div>
<div class="panel panel-default">
    @foreach (var answer in Model.Answers)
    {
        @Html.Partial("_AnswersOnPostPartial", answer);
    }
</div>

<nav class="text-center">
    <ul class="pagination">
        @if (Model.CurrentPage > 1)
            {
            <li>
                <a href="/Posts/Details/@(Model.Post.EncodedId)?page=@(Model.CurrentPage - 1)" aria-label="Previous">
                    <span aria-hidden="true">&larr;Previous</span>
                </a>
            </li>
        }
        @for (int i = 1; i <= Model.TotalPages; i++)
            {
                var className = string.Empty;
                if (Model.CurrentPage == i)
                {
                    className = "active";
                }
                <li class="@className"><a href="/Posts/Details/@(Model.Post.EncodedId)?page=@i">@i</a></li>
        }
        @if (Model.CurrentPage < Model.TotalPages)
            {
            <li>
                <a href="/Posts/Details/@(Model.Post.EncodedId)?page=@(Model.CurrentPage + 1)" aria-label="Next">
                    <span aria-hidden="true">Next &rarr;</span>
                </a>
            </li>
        }
    </ul>
</nav>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $("form input[type=submit]").click(function () {
            tinyMCE.triggerSave();
        });
    </script>

    <script>
        $("div[data-action='postDelete'").click(function () {
            var id = $(this).data("id");
            deleteSubject(id, "postDelete");
        });
        $("div[data-action='answerDelete'").click(function () {
            var id = $(this).data("id");
            deleteSubject(id, "answerDelete");
        });
        $("div[data-action='commentDelete'").click(function () {
            var id = $(this).data("id");
            deleteSubject(id, "commentDelete");
        });

        function deleteSubject(id, subjectToDelete) {
            if (subjectToDelete == "postDelete") {
                $.post("/Posts/DeletePost", { postId: id },
                           function (data) {
                               var message = data.notification;
                               window.location = "/Posts/Index";
                           });
            }
            else if (subjectToDelete == "answerDelete") {
                $.post("/Answers/DeleteAnswer", { answerId: id },
                          function (data) {
                              var message = data.notification;
                              location.reload();
                          });
            }
            else if (subjectToDelete == "commentDelete") {
                $.post("/Comments/DeleteComment", { commentId: id },
                          function (data) {
                              var message = data.notification;
                              location.reload();
                          });
            }
           
        }
    </script>

    @* For edit post *@
    <script>
        function OnAjaxEditPostSuccess(data) {
            $("#onEditPost").show(1000);
            scrollToTopOfPage();
            $("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");
        }

        function OnAjaxEditPostBegin(data) {
            $("#originalPost").hide(1000);
        }

    </script>

    @* On edit answer *@
    <script>
        var answerId;
        var originalAnswer;
        var answerSelector;
        function OnAjaxEditAnswerSuccess(data) {
            answerSelector = "#onEditAnswer" + answerId;
            $(answerSelector).show(1000);

            $("html, body").animate({
                scrollTop: $(answerSelector).offset().top
            }, 2000);

            $("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");
        }

        function OnAjaxEditAnswerBegin(data) {
            $(answerSelector).hide(10);
            $(originalAnswer).show(10);

            answerId = $(this).data("subject");
            originalAnswer = "#originalAnswer" + answerId;
            $(originalAnswer).hide(1000);
        }
    </script>

    @* On edit comment *@
    <script>
        var commentId;
        var commentSelector;
        var originalComment;
        function OnAjaxEditCommentSuccess(data) {
            commentSelector = "#onEditComment" + commentId;
            debugger;
            $(commentSelector).show(1000);
            $("html, body").animate({
                scrollTop: $(commentSelector).offset().top
            }, 2000);
            $("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");
        }

        function OnAjaxEditCommentBegin(data) {
            $(commentSelector).hide(10);
            $(originalComment).show(10);

            commentId = $(this).data("subject");
            originalComment = "#originalComment" + commentId;
            $(originalComment).hide(1000);
        }
    </script>

    @* Add vote to post, answer and comment *@
    <script>
        $("div[data-action='up'").click(function () {
            var id = $(this).attr("data-id");
            var subject = $(this).attr("data-subject");
            voteClick(id, 1, subject);
        });
        $("div[data-action='down'").click(function () {
            var id = $(this).attr("data-id");
            var subject = $(this).attr("data-subject");
            voteClick(id, -1, subject);
        });

        function voteClick(id, voteType, subject) {
            $.post("/Votes/Vote", { subjectId: id, voteType: voteType, subjectType: subject },
           function (data) {
               var newVotesCount = data.Count;
               $("div[data-subject='" + subject + "'][data-action='votesCount'][data-id='" + id + "']").html(newVotesCount)
           });
        }
    </script>

    @* Show area for creating answer or comment *@
    <script>
        var selector;
        function OnAjaxAnswerSuccess(data) {
            $("#addAnswerToPost").show(1000);
            $("html, body").animate({
                scrollTop: $("hr.post-info").offset().top
            }, 2000);
        }

        function OnAjaxCommentBegin(data) {
            $(selector).hide(1000);
        }

        function OnAjaxCommentSuccess(data) {
            $(selector).hide(1000);
            selector = "#" + $(this).attr("updateTargetId");
            console.log(selector);
            $(selector).show(1000);
            $("html, body").animate({
                scrollTop: $(selector).offset().top
            }, 2000);
        }

        function scrollToTopOfPage() {
            $("html, body").animate({
                scrollTop: $("html").offset().top
            }, 200);
        }

        function hideAddAnswer() {
            $("#addAnswerToPost").hide(1000);
            scrollToTopOfPage();
        }

        function hideAddComment() {
            $(selector).hide(1000);
            scrollToTopOfPage();
        }
    </script>
}